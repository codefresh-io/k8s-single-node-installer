#!/bin/bash

msg() { echo -e "\e[32mCF-HELM INFO [$(date +%F_%H-%M-%S)] ---> $1\e[0m"; }
err() { echo -e "\e[31mCF-HELM ERR [$(date +%F_%H-%M-%S)] ---> $1\e[0m" ; exit 1; }

readonly CHANNEL="${CF_HELM_CHANNEL:-dev}"

readonly WORKING_DIR="/opt/codefresh"
readonly VALUES_ARCHIVE="${WORKING_DIR}/valuesArchive"

export HELM_HOME="/root/.helm"
readonly HELM_VERSION=2.9.1
readonly CODEFRESH_REPOSITORY=http://charts.codefresh.io/${CHANNEL}
readonly DEFAULT_VALUES_FILE="${WORKING_DIR}/values.yml"
readonly DOCKER_CFG_YAML="${WORKING_DIR}/dockercfg.yml"
readonly TOKEN_VALUES_YAML="${WORKING_DIR}/token-values.yml"

running_as_root() {
	if [[ $EUID > 0 ]]; then
		err "Please run as root/sudo"
		exit 1
	fi
}

waitForHelm() {
	while true; do
		status=$(kubectl get po -l app=helm -l name=tiller --show-all=false -o=custom-columns=STATUS:.status.phase --no-headers=true -nkube-system)

		msg "Tiller status = $status"
		[ "$status" == "Running" ] && break

		msg "Sleeping 10 seconds ..."
		sleep 10

	done
}

VALUES_FILE_YAML="${1:-$DEFAULT_VALUES_FILE}"

helmInstall() {
  msg "Downloading and installing helm's client and server components..."
  wget https://storage.googleapis.com/kubernetes-helm/helm-v${HELM_VERSION}-linux-amd64.tar.gz -P /tmp/
  tar xvf /tmp/helm-v${HELM_VERSION}-linux-amd64.tar.gz -C /tmp/
  chmod +x /tmp/linux-amd64/helm
  sudo mv /tmp/linux-amd64/helm /usr/local/bin/
  rm -rf /tmp/helm-v${HELM_VERSION}-linux-amd64 /tmp/helm-v${HELM_VERSION}-linux-amd64.tar.gz
}

checkHelmInstalled() {
  if [ ! -e /usr/local/bin/helm ]
    then
    helmInstall
  fi
}

msg "Checking Helm..."
checkHelmInstalled

msg "Helm initialization..."
helm init

msg "Waiting for helm's server installation to complete..."
waitForHelm

msg "Adding Helm repo..."
helm repo add codefresh "${CODEFRESH_REPOSITORY}"

msg "Starting daemon ;)..."

while true; do

  msg "Waiting values files..."
  while [ ! -e ${DOCKER_CFG_YAML} ]; do sleep 1; done
  while [ ! -e ${TOKEN_VALUES_YAML} ]; do sleep 1; done
  while [ ! -e ${VALUES_FILE_YAML} ]; do sleep 1; done

  msg "Checking tiller status..."
  waitForHelm

  MTU_VALUE="--set global.mtu=$(cat /sys/class/net/cni0/mtu)"

  TIMESTAMP=$(date +%F_%H-%M-%S)
  msg "Installing/Updating Codefresh..."
  helm upgrade cf codefresh/codefresh \
    --install \
    --namespace codefresh \
    --values "${VALUES_FILE_YAML}" \
    --values "${DOCKER_CFG_YAML}" \
    --values "${TOKEN_VALUES_YAML}" \
    --no-hooks \
    --set cfapi.redeploy=true \
    ${MTU_VALUE}

  mkdir -p ${VALUES_ARCHIVE}

  mv ${VALUES_FILE_YAML} ${VALUES_ARCHIVE}/values_${TIMESTAMP}.yml
  mv ${TOKEN_VALUES_YAML} ${VALUES_ARCHIVE}/token-values_${TIMESTAMP}.yml

done
