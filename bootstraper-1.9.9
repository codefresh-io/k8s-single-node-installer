#!/usr/bin/env bash

msg() { echo -e "\e[32mBOOTSTRAP INFO [$(date +%F_%H-%M-%S)] ---> $1\e[0m"; }
err() { echo -e "\e[31mBOOTSTRAP ERR [$(date +%F_%H-%M-%S)] ---> $1\e[0m" ; exit 1; }

readonly KUBECONFIG=/root/.kube/config
readonly WORKING_DIR="/opt/codefresh"
readonly VALUES_ARCHIVE_DIR="${WORKING_DIR}/valuesArchive"
readonly IMAGES_LIST=${WORKING_DIR}/images
readonly CREDENTIALS=${WORKING_DIR}/credentials
readonly TOKEN_VALUES_YAML=${WORKING_DIR}/token-values.yml
readonly DOCKER_CFG_YAML=${WORKING_DIR}/dockercfg.yml

if [ ! -d "$VALUES_ARCHIVE_DIR" ]; then
  msg "Waiting token..."
  while [ ! -e ${CREDENTIALS} ]; do sleep 1; done

  DOCKER_CFG_JSON=$(base64 -d ${CREDENTIALS} | awk '/^{/,/^}/')
  TOKEN_VALUES=$(base64 -d ${CREDENTIALS} | awk '/^{/,/^}/{next}1')

  echo "${TOKEN_VALUES}" > ${TOKEN_VALUES_YAML}
#  rm ${CREDENTIALS}

  msg "Docker login"
  docker login -u _json_key -p "${DOCKER_CFG_JSON}" https://gcr.io || err "Cannot login to docker registry"
<<COMMENT
  msg "Kubernetes secret"
  kubectl create secret docker-registry dockercfg \
    --docker-server=https://gcr.io \
    --docker-username=_json_key \
    --docker-password="${DOCKER_CFG_JSON}" \
    --docker-email=admin@codefresh.io || err "Cannot create docker regestry secret (dockercfg)"

# kubectl get secret dockercfg -oyaml | grep '\.dockercfg' | awk -F '.' '{print $2}' > ${DOCKER_CFG_YAML}
#  DOCKER_CFG_VAR=$(kubectl get secret dockercfg -oyaml | grep '\.dockerconfigjson' | awk -F '.' '{print $2}' | awk -F ' ' '{ print $2  }')
COMMENT
  
  DOCKER_CFG_VAR=$(echo -n "_json_key:${DOCKER_CFG_JSON}" | base64 -w0)

  cat <<EOF >${DOCKER_CFG_YAML}
---
dockerconfigjson:
  auths:
    gcr.io:
      auth: ${DOCKER_CFG_VAR}

cfui:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}

runtime-environment-manager:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}

onboarding-status:
  dockerconfigjson:
    auths:
      gcr.io:
        auth: ${DOCKER_CFG_VAR}
EOF

#  kubectl delete secret dockercfg

  msg "Pulling images..."
  for image in $(cat ${IMAGES_LIST}); do
    docker pull $image
  done
fi

# daemon
msg "Starting daemon..."
while true; do
  msg "Waiting token..."
  while [ ! -e ${CREDENTIALS} ]; do sleep 1; done
  msg "Writing new values..."
  TOKEN_VALUES=$(base64 -d ${CREDENTIALS} | awk '/^{/,/^}/{next}1')
  echo "${TOKEN_VALUES}" > ${TOKEN_VALUES_YAML}.tmp
  mv ${TOKEN_VALUES_YAML}.tmp ${TOKEN_VALUES_YAML}
  rm ${CREDENTIALS}
done
